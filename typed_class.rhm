#lang shplait
import:
  open:
    "class.rhm"
    "inherit.rhm"

type ClassT
| classT(super_name :: Symbol,
         fields :: Listof(Symbol * Type),
         methods :: Listof(Symbol * MethodT), final::Boolean)

type MethodT
| methodT(arg_type :: Type,
          result_type :: Type,
          body_exp :: ExpI)

type Type
| intT()
| objT(class_name :: Symbol)

// ----------------------------------------

fun type_error(a, msg):
  error(#'typecheck, "no type: " +& a +& " not " +& msg)

fun get_all_field_types(class_name, t_classes):
  if class_name == #'Object
  | []
  | match find(t_classes, class_name)
    | classT(super_name, fields, methods, final):
        append(get_all_field_types(super_name, t_classes),
               map(snd, fields))

// ----------------------------------------

fun make_find_in_tree(class_items):
  fun (name, class_name, t_classes):
    def t_class = find(t_classes, class_name)
    def items  = class_items(t_class)
    def super_name = classT.super_name(t_class)
    if super_name == #'Object
    | find(items, name)
    | try:
        find(items, name)
        ~catch:
          make_find_in_tree(class_items)(name,
                                         super_name,
                                         t_classes)

def find_field_in_tree = make_find_in_tree(classT.fields)

def find_method_in_tree = make_find_in_tree(classT.methods)

// ----------------------------------------

    
      
fun is_subclass(name1, name2, t_classes):
  cond
  | name1 == name2: #true
  | name1 == #'Object: #false
  | ~else:
      match find(t_classes, name1)
      | classT(super_name, fields, methods, final):
          is_subclass(super_name, name2, t_classes)

fun is_subtype(t1, t2, t_classes):
  match t1
  | objT(name1):
      match t2 
      | objT(name2):
          is_subclass(name1, name2, t_classes)
      | ~else: #false
  | ~else: t1 == t2

module test:
  def a_t_class = values(#'A, classT(#'Object, [], [], #false))
  def b_t_class = values(#'B, classT(#'A, [], [], #false))

  check: is_subclass(#'Object, #'Object, [])
         ~is #true
  check: is_subclass(#'A, #'B, [a_t_class, b_t_class])
         ~is #false
  check: is_subclass(#'B, #'A, [a_t_class, b_t_class])
         ~is #true

  check: is_subtype(intT(), intT(), [])
         ~is #true
  check: is_subtype(intT(), objT(#'Object), [])
         ~is #false
  check: is_subtype(objT(#'Object), intT(), [])
         ~is #false
  check: is_subtype(objT(#'A), objT(#'B), [a_t_class, b_t_class])
         ~is #false
  check: is_subtype(objT(#'B), objT(#'A), [a_t_class, b_t_class])
         ~is #true

// ----------------------------------------

def typecheck_exp :: (ExpI, Listof(Symbol * ClassT), Type, Type) -> Type:
  fun (exp, t_classes, this_type, arg_type):
    fun recur(exp):
      typecheck_exp(exp, t_classes, this_type, arg_type)
    fun typecheck_nums(l, r):
      match recur(l)
      | intT():
          match recur(r)
          | intT(): intT()
          | ~else: type_error(r, "Int")
      | ~else: type_error(l, "Int")
    match exp
    | if0I(c, bt, bf):
        match recur(c)
        | intT():
            match recur(bt)
            | intT():
                match recur(bf)
                | intT():
                    intT()
                | ~else: type_error(bf, "type mismatch")
            | objT(c_bt):
                match recur(bf)
                | objT(c_bf):
                    //objT(c_bf)
                    objT(find_nearest_common_ancestor(c_bt, c_bf, t_classes))
                | ~else: type_error(bf, "type mismatch")
                
        | ~else: type_error(c, "Int")
    | intI(n): intT()
    | plusI(l, r): typecheck_nums(l, r)
    | multI(l, r): typecheck_nums(l, r)
    | argI(): arg_type
    | thisI(): this_type
    | nullI(): objT(#'Null)
    | newI(class_name, exps):
        def arg_types = map(recur, exps)
        def field_types = get_all_field_types(class_name, t_classes)
        if (length(arg_types) == length(field_types)
              && foldl(fun (b, r): b && r,
                       #true,
                       map2(fun (t1, t2):
                              is_subtype(t1, t2, t_classes),
                            arg_types,
                            field_types)))
        | objT(class_name)
        | type_error(exp, "field type mismatch")
    | getI(obj_exp, field_name):
        match recur(obj_exp):
        | objT(class_name):
            if class_name == #'Null
            | type_error(obj_exp, "Attempt to use a null a method source.")
            | find_field_in_tree(field_name,
                                 class_name,
                                 t_classes)
            
        | ~else: type_error(obj_exp, "object")
    | sendI(obj_exp, method_name, arg_exp):
        def obj_type = recur(obj_exp)
        def arg_type = recur(arg_exp)
       
        match obj_type
        | objT(class_name):
             if class_name == #'Null
             | type_error(obj_exp, "Attempt to use a null a method source.")
             | typecheck_send(class_name, method_name,
                              arg_exp, arg_type,
                              t_classes)        
        | ~else:
            type_error(obj_exp, "object")
    | superI(method_name, arg_exp):
        def arg_type = recur(arg_exp)
        def this_class = find(t_classes, objT.class_name(this_type))
        typecheck_send(classT.super_name(this_class),
                       method_name,
                       arg_exp, arg_type,
                       t_classes)
        

fun find_nearest_common_ancestor(classname_a, classname_b, classes):
  if is_subclass(classname_a, classname_b, classes)
  | classname_b
  | match find(classes, classname_b)
    | classT(super_name, fields, methods, final):   
        find_nearest_common_ancestor(classname_a, super_name, classes)



fun typecheck_send(class_name :: Symbol,
                   method_name :: Symbol,
                   arg_exp :: ExpI,
                   arg_type :: Type,
                   t_classes :: Listof(Symbol * ClassT)):
  
  match find_method_in_tree(method_name,
                            class_name,
                            t_classes)
  | methodT(arg_type_m, result_type, body_exp):
      if (arg_type == objT(#'Null) && arg_type_m != intT())  || is_subtype(arg_type, arg_type_m, t_classes)
      | result_type
      | type_error(arg_exp, to_string(arg_type_m))

fun typecheck_method(method :: MethodT,
                     this_type :: Type,
                     t_classes :: Listof(Symbol * ClassT)) :: Void:
  match method
  | methodT(arg_type, result_type, body_exp):
      if is_subtype(typecheck_exp(body_exp, t_classes,
                                  this_type, arg_type),
                    result_type,
                    t_classes)
      | #void
      | type_error(body_exp, to_string(result_type))

fun check_override(method_name :: Symbol,
                   method :: MethodT,
                   this_class :: ClassT,
                   t_classes :: Listof(Symbol * ClassT)):
  def super_name = classT.super_name(this_class)
  def super_method:
    try:
      // Look for method in superclass:
      find_method_in_tree(method_name,
                          super_name,
                          t_classes)
      ~catch:
        // no such method in superclass:
        method
  if (methodT.arg_type(method) == methodT.arg_type(super_method)
        && methodT.result_type(method)  == methodT.result_type(super_method))
  | #void
  | error(#'typecheck, "bad override of " +& method_name)

fun typecheck_class(class_name :: Symbol,
                    t_class :: ClassT,
                    t_classes :: Listof(Symbol * ClassT)):
  match t_class
  | classT(super_name, fields, methods, final):
      if super_name == #'Null || class_name == #'Null
      |  type_error(intI(1), "Attempt to use special null class")
      |  map(fun (m): 
               typecheck_method(snd(m), objT(class_name), t_classes)
               check_override(fst(m), snd(m), t_class, t_classes),
             methods)
     

fun typecheck(a :: ExpI,
              t_classes :: Listof(Symbol * ClassT)) :: Type:
  begin:
    map(fun (tc):
          typecheck_class(fst(tc), snd(tc), t_classes),
        t_classes)
    map(fun (tc):
          check_for_final(fst(tc), snd(tc), t_classes),
        t_classes)
    typecheck_exp(a, t_classes, objT(#'Object), intT())

// ----------------------------------------
fun check_for_final(name, class, t_classes):
  match class
  | classT(super_name, fields, methods, final):
      if find_wrapper(t_classes, super_name)
      | match find(t_classes, super_name)
        | classT(super_name_s, fields_s, methods_s, final_s):
            if final_s == #true
            | error(#'final, "attempted to extend final class")
            | #void
        
      | #void 
fun find_wrapper(t_classes, super_name):
  try:
    begin:
      find(t_classes, super_name)
      #true
    ~catch: #false 


module test:
  def posn_t_class:
    values(#'Posn,
           classT(#'Object,
                  [values(#'x, intT()), values(#'y, intT())],
                  [values(#'mdist,
                          methodT(intT(), intT(),
                                  plusI(getI(thisI(), #'x), getI(thisI(), #'y)))),
                   values(#'addDist,
                          methodT(objT(#'Posn), intT(),
                                  plusI(sendI(thisI(), #'mdist, intI(0)),
                                        sendI(argI(), #'mdist, intI(0)))))], #false))

  def posn3D_t_class:
    values(#'Posn3D,
           classT(#'Posn,
                  [values(#'z, intT())],
                  [values(#'mdist,
                          methodT(intT(), intT(),
                                  plusI(getI(thisI(), #'z),
                                        superI(#'mdist, argI()))))], #false))

  def square_t_class :
    values(#'Square,
           classT(#'Object,
                  [values(#'topleft, objT(#'Posn))],
                  [], #false))

  def animal_class:
     values(#'Animal,
            classT(#'Object,
                   [],
                   [],
                   #false))
  def reptile_class:
    values(#'Reptile,
           classT(#'Animal,
                  [],
                  [], #false))
  def bird_class:
    values(#'Bird,
           classT(#'Animal,
                  [],
                  [], #false))
  def robin_class:
    values(#'Robin,
           classT(#'Bird,
                  [],
                  [], #false))
  def hawk_class:
    values(#'Hawk,
           classT(#'Bird,
                  [],
                  [], #false))
  def lizard_class:
    values(#'Lizard,
           classT(#'Reptile,
                  [],
                  []
                  , #false))
  def snake_class:
    values(#'Snake,
           classT(#'Reptile,
                  [],
                  [], #false))
  def parentless_class:
    values(#'Orphan,
           classT(#'Parent,
                  [],
                  [], #true))
  def illegal_extension_class:
    values(#'Illegal,
           classT(#'Orphan,
                  [],
                  [], #false))
  def null_class:
    values(#'Null,
           classT(#'Object,
                  [],
                  [values(#'do,methodT(intT(), intT(), intI(5)))], #false))
  def null_child_class:
    values(#'Child,
           classT(#'Null,
                  [],
                  []
                  , #false))
  def test_null_class:
    values(#'Testnull,
           classT(#'Object,
                  [],
                  [values(#'dosomething, methodT(objT(#'Object), intT(), intI(5))),
                   values(#'dowithint, methodT(intT(), intT(), intI(5))),
                   values(#'returnnull, methodT(objT(#'Object), objT(#'Object), argI()))]
                  , #false))
  fun typecheck_posn(a):
    typecheck(a, [posn_t_class, posn3D_t_class, square_t_class])
  fun typecheck_animals(a):
    typecheck(a, [animal_class, bird_class, reptile_class, hawk_class, snake_class, robin_class, lizard_class])
  
  def new_posn27 = newI(#'Posn, [intI(2), intI(7)])
  def new_posn531 = newI(#'Posn3D, [intI(5), intI(3), intI(1)])
  //final testing
  check: typecheck(nullI(), [parentless_class, illegal_extension_class])
         ~raises ""
  // null testing
  check: typecheck(nullI(), [])
         ~is objT(#'Null)
  check: typecheck(sendI(newI(#'Testnull, []), #'dosomething, nullI()), [test_null_class])
         ~is intT()
  check: typecheck(sendI(newI(#'Testnull, []), #'dowithint, nullI()), [test_null_class])
         ~raises ""
  check: typecheck(sendI(newI(#'Testnull, []), #'returnnull, nullI()), [test_null_class])
         ~is objT(#'Object)
  check: typecheck(sendI(nullI(), #'dosomething, intI(0)), [])
         ~raises ""
  check: typecheck(getI(nullI(), #'value), [])
         ~raises ""
  check: typecheck(intI(4), [null_class])
         ~raises ""
  check: typecheck(intI(4), [null_child_class])
         ~raises ""
  //if0I tests       
  check: typecheck_animals(if0I(newI(#'Object, []), intI(6), intI(7)))
         ~raises ""
  check: typecheck_animals(if0I(intI(5), intI(6), newI(#'Object, [])))
         ~raises ""
  check: typecheck_animals(if0I(intI(5), newI(#'Object, []), intI(7)))
         ~raises ""   
  check: typecheck_animals(if0I(intI(5), intI(6), intI(7)))
         ~is intT()
  check: typecheck_animals(if0I(intI(5), newI(#'Object, []), newI(#'Object, [])))
         ~is objT(#'Object)
  check: typecheck_animals(if0I(intI(5), newI(#'Animal, []), newI(#'Object, [])))
         ~is objT(#'Object)
  check: typecheck_animals(if0I(intI(5), newI(#'Bird, []), newI(#'Reptile, [])))
         ~is objT(#'Animal)
  check: typecheck_animals(if0I(intI(5), newI(#'Robin, []), newI(#'Hawk, [])))
         ~is objT(#'Bird)
  check: typecheck_animals(if0I(intI(5), newI(#'Robin, []), newI(#'Snake, [])))
         ~is objT(#'Animal)
  check: typecheck_animals(if0I(intI(5), newI(#'Robin, []), newI(#'Reptile, [])))
         ~is objT(#'Animal)

  check: typecheck_posn(sendI(new_posn27, #'mdist, intI(0)))
         ~is intT()
  check: typecheck_posn(sendI(new_posn531, #'mdist, intI(0)))
         ~is intT()  
  check: typecheck_posn(sendI(new_posn531, #'addDist, new_posn27))
         ~is intT() 
  check: typecheck_posn(sendI(new_posn27, #'addDist, new_posn531))
         ~is intT()

  check: typecheck_posn(newI(#'Square, [newI(#'Posn, [intI(0), intI(1)])]))
         ~is objT(#'Square)
  check: typecheck_posn(newI(#'Square, [newI(#'Posn3D, [intI(0), intI(1), intI(3)])]))
         ~is objT(#'Square)

  check: typecheck(multI(intI(1), intI(2)),
                   [])
         ~is intT()
  check: typecheck_posn(sendI(intI(10), #'Null, intI(0)))
         ~raises "no type"
  check: typecheck_posn(sendI(intI(10), #'mdist, intI(0)))
         ~raises "no type"
  check: typecheck_posn(sendI(new_posn27, #'mdist, new_posn27))
         ~raises "no type"
  check: typecheck(plusI(intI(1), newI(#'Object, [])),
                   [])
         ~raises "no type"
  check: typecheck(plusI(newI(#'Object, []), intI(1)),
                   [])
         ~raises "no type"
  check: typecheck(plusI(intI(1), newI(#'Object, [intI(1)])),
                   [])
         ~raises "no type"
  check: typecheck(getI(intI(1), #'x),
                   [])
         ~raises "no type"
  check: typecheck(intI(10),
                   [posn_t_class,
                    values(#'Other,
                           classT(#'Posn,
                                  [],
                                  [values(#'mdist,
                                          methodT(objT(#'Object), intT(),
                                                  intI(10)))], #false))])
         ~raises "bad override"
  check: typecheck_method(methodT(intT(), objT(#'Object), intI(0)), objT(#'Object), [])
         ~raises "no type"
  check: typecheck(intI(0),
                   [square_t_class,
                    values(#'Cube,
                           classT(#'Square,
                                  [],
                                  [values(#'m,
                                          methodT(intT(), intT(),
                                                  // No such method in superclass:
                                                  superI(#'m, intI(0))))], #false))])
         ~raises "not found"

// ----------------------------------------

def strip_types :: ClassT -> ClassI:
  fun (t_class):
    match t_class
    | classT(super_name, fields, methods, final):
       classI(super_name,
              map(fst, fields),
              map(fun (m):
                    values(fst(m),
                           match snd(m)
                           | methodT(arg_type, result_type, body_exp):
                               body_exp),
                  methods), final)

def interp_t :: (ExpI, Listof(Symbol * ClassT)) -> Value:
  fun (a, t_classes):
    interp_i(a,
             map(fun (c):
                   values(fst(c), strip_types(snd(c))),
                 t_classes))

module test:
  fun interp_t_posn(a):
    interp_t(a, [posn_t_class, posn3D_t_class])
  
  check: interp_t_posn(sendI(new_posn27, #'mdist, intI(0)))
         ~is intV(9)
  check: interp_t_posn(sendI(new_posn531, #'mdist, intI(0)))
         ~is intV(9)
  check: interp_t_posn(sendI(new_posn531, #'addDist, new_posn27))
         ~is intV(18)
  check: interp_t_posn(sendI(new_posn27, #'addDist, new_posn531))
         ~is intV(18)
